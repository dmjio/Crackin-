using System;
using System.Text;
using LinkedList;
using ReplaceString;

namespace CircularListNodeBeginning
{ 
	/// <summary>
	/// given a circular linked list implelment an algorithm which returns the node at the beginning of the loop
	/// </summary>

	class MainClass
	{
		public static void Main (string[] args)
		{

			var list = new LinkedList<int> ();
			list.add (1);
			list.add (2);
			list.add (3);
			list.add (4);
			list.add (5);
			list.add (6);
			list.add (7);
			list.add (8);
			list.add (9);
			list.add (10);
			list.add (11);

			//create circle (eleven is the tail in this case, pointing back to another element inside of the linkedlist
			var four = list.GetNode (4);
			var eleven = list.GetNode (11);

			eleven.Next = four;

			var slow = list.Head;
			var fast = list.Head;


			while (fast != null && fast.Next != null) { //ensure that fast is not null
				slow = slow.Next;
				fast = fast.Next.Next;
				if (slow == fast)
					break;
			}

			if (fast == null || fast.Next == null) 
				return; // no loop

			//if a loop exists they will have met
			fast = list.Head;

			while (slow != fast) {
				slow = slow.Next;
				fast = fast.Next;
			}

			Console.WriteLine ("The beginning of this loop starts: {0}", slow.Data); //returns 4


		}
	}
}